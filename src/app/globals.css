/*
This `globals.css` file is automatically generated by `create-t3-app` and serves
as the main stylesheet for the entire application. It is typically imported once
in the root layout file (`src/app/layout.tsx`).

Its primary job is to use the special `@tailwind` directives. These directives are
instructions for the Tailwind CSS build process to inject its different "layers"
of styles into the final CSS file. The order of these layers is critical for
proper styling and overrides.

Layers:

- `@tailwind base`:
  This injects "Preflight," which is Tailwind's sophisticated CSS reset. Every web
  browser has its own default styles for HTML elements (e.g., margins on headings,
  button borders). Preflight erases all these inconsistent browser defaults and provides
  a blank slate. This is the foundation upon which all other
  Tailwind styles are built, ensuring the site looks the same on all browsers.

- `@tailwind components`:
  This layer enables the ability to create reusable, pre-defined component classes. While the "utility-first"
  approach is primary, sometimes a complex component (like a button) needs to be
  styled consistently across the application without repeating the same long list
  of utility classes. The `@apply` directive can be used in this CSS file to create
  a single class that combines multiple utilities.

  For example, one could add this rule to this file:
  .btn-primary {
    @apply bg-blue-600 text-white font-bold py-2 px-4 rounded hover:bg-blue-700;
  }

  The `@tailwind components` directive is what makes this work. It processes these custom
  component classes and makes `.btn-primary` available as a regular CSS class in the
  project. It's also where third-party plugins (like `@tailwindcss/forms`) inject their
  pre-styled component classes. This layer comes after `base` so these components can
  build upon the reset styles.

- `@tailwind utilities`:
  This injects all of Tailwind's powerful, single-purpose utility classesâ€”the core
  of the framework. These are classes like `p-4`, `flex`, and `text-red-500`. This layer
  is injected LAST to ensure that utility classes always have the highest priority. This
  allows for easily overriding any style from the `base` or `components` layers (e.g.,
  one could use `<button class="btn-primary mt-8">` to add a top margin to a custom button).
*/
@tailwind base;
@tailwind components;
@tailwind utilities;

@theme {
  --font-sans: var(--font-geist-sans), ui-sans-serif, system-ui, sans-serif,
    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}
