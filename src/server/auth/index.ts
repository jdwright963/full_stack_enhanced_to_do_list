// This file is automatically generated by `create-t3-app`.
// It is the main entry point and initialization file for the NextAuth.js library.
// Its primary job is to take the detailed configuration from `./config.ts`, initialize the
// NextAuth.js core, and then export the essential, ready-to-use authentication handlers,
// functions, and objects. It also includes a critical performance optimization using React's `cache`
// function to prevent redundant database calls for the user's session during a single request.

// Imports the main `NextAuth` function from the `next-auth` library.
// This function is the "factory" that takes your configuration object and produces all the
// necessary authentication handlers and utilities.
import NextAuth from "next-auth";

// Imports the `cache` function, a special utility from React itself.
// `cache` is used for "memoization" on the server. If you wrap a function with `cache`, React
// ensures that if that function is called multiple times with the same arguments within a single
// server render pass, the original function is only executed once. The result of the first call is
// stored (cached) and returned for all subsequent calls, which is a major performance optimization.
import { cache } from "react";

// Imports the main configuration object, `authConfig`, from the neighboring `config.ts` file.
// This object contains all of our specific settings for providers, the database adapter, callbacks, etc.
import { authConfig } from "./config";

// This is the most important line. It calls the `NextAuth` factory function with our configuration.
// The function returns a single object containing all the core utilities, which we then immediately
// destructure into individual constants.
//
// Let's break down the destructuring: `const { ... } = NextAuth(authConfig);`
// - `auth: uncachedAuth`: This is destructuring with renaming. The property returned by `NextAuth` is
//   named `auth`. It is a function that retrieves the current user session. We are taking this
//   function and assigning it to a new constant with a different name, `uncachedAuth`. We do this
//   because we are about to create a new, optimized version of it that will be named `auth`.
//
// - `handlers`: An object containing the pre-built `GET` and `POST` HTTP request handler functions.
//   This is what we export to our `/api/auth/[...nextauth]/route.ts` file.
//
// - `signIn`, `signOut`: These are server-side action functions. They can be used to programmatically
//   sign users in or out from server-side code.
const { auth: uncachedAuth, handlers, signIn, signOut } = NextAuth(authConfig);

// This line applies the React `cache` optimization to our session-fetching function.
// We take the original `uncachedAuth` function and pass it to `cache`.
// The `cache` function returns a new, "memoized" version of the function. Now, if multiple
// Server Components in the same render tree call `await auth()`, the underlying logic will only run once. All subsequent calls will receive the cached result.
// We store this new, optimized function in a constant named `auth`. This is the version we want to use.
const auth = cache(uncachedAuth);

// This is a "named export" statement. It bundles all of our created constants and makes them
// available to be imported by other files in our application.
// For example, `layout.tsx` will `import { auth } ...` and the API route will `import { handlers } ...`.
export { auth, handlers, signIn, signOut };
